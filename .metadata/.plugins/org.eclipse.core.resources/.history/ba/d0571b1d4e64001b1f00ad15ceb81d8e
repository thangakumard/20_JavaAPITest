package algorithms.singlyLinkedList.medium;

public class LList09_LinkedListCycle_II {

	 public ListNode detectCycle(ListNode head) {
	        ListNode slow = head;
	        ListNode fast = head;
	        
	        while(fast != null && fast.next != null){
	            slow = slow.next;
	            fast = fast.next.next;
	            if(slow == fast){
	                return findCycleStart(slow, head);
	            }
	        }
	        
	        return null;
	    }
	    
	    private ListNode findCycleStart(ListNode slow, ListNode head){
	        
	        ListNode ptr1 = head, ptr2 = null;
	        while(true){
	            ptr2 = slow;
	            
	            while(ptr2.next != slow && ptr2.next != ptr1){
	                ptr2 = ptr2.next;
	            }
	            if(ptr2.next == ptr1){
	                break;
	            }
	            
	            ptr1 = ptr1.next;
	        }
	        return ptr1;
	    }
}
