package algorithms.singlyLinkedList;

import java.util.LinkedList;
import java.util.*;
/****
 * 
 * https://leetcode.com/problems/add-two-numbers-ii/
 *
 */

public class AddTwoNumbers {

		
		   Stack<Integer> l1_stack = new Stack<Integer>();
		    Stack<Integer> l2_stack = new Stack<Integer>();
		    Stack<Integer> result = new Stack<Integer>();
		    int carry = 0;
		    public ListNode addTwoNumbers_approach_01(ListNode l1, ListNode l2) {
		        recursive(l1, l1_stack);
		        recursive(l2, l2_stack);
		        ListNode dummy = new ListNode(0);
		        ListNode head = dummy;
		        while(!l1_stack.isEmpty() || !l2_stack.isEmpty() || carry > 0){
		            int v1 = !l1_stack.isEmpty() ? l1_stack.pop() : 0;
		            int v2 = !l2_stack.isEmpty() ? l2_stack.pop() : 0;
		            
		            int sum = v1 + v2 + carry;
		            result.push(sum%10);
		            carry = sum / 10;   
		        }
		        while(!result.isEmpty()){
		            head.next = new ListNode(result.pop());
		            head = head.next;
		        }
		        
		        return dummy.next;
		    }
		    
		    public void recursive(ListNode l1, Stack<Integer> stack){
		        
		        if(l1 != null){
		            stack.push(l1.val);
		            l1 = l1.next;
		        }else
		            return;
		       recursive(l1,stack);
		    }
	
}
