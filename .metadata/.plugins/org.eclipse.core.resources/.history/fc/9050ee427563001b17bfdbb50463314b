package algorithms.singlyLinkedList;

import java.util.LinkedList;
import java.util.*;
/****
 * 
 * https://leetcode.com/problems/add-two-numbers-ii/
 *
 */

public class AddTwoNumbers {


	   public ListNode reverseList(ListNode head) {
	        ListNode last = null;
	        while (head != null) {
	            // keep the next node
	            ListNode tmp = head.next;
	            // reverse the link
	            head.next = last;
	            // update the last node and the current node
	            last = head;
	            head = tmp;    
	        }    
	        return last;
	    }
	    
	    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
	        // reverse lists
	        l1 = reverseList(l1);
	        l2 = reverseList(l2);
	        
	        ListNode head = null;
	        int carry = 0;
	        while (l1 != null || l2 != null) {
	            // get the current values 
	            int x1 = l1 != null ? l1.value : 0;
	            int x2 = l2 != null ? l2.value : 0;
	            
	            // current sum and carry
	            int val = (carry + x1 + x2) % 10;
	            carry = (carry + x1 + x2) / 10;
	            
	            // update the result: add to front
	            ListNode curr = new ListNode(val);
	            curr.next = head;
	            head = curr;
	            
	            // move to the next elements in the lists
	            l1 = l1 != null ? l1.next : null;
	            l2 = l2 != null ? l2.next : null;
	        }

	        if (carry != 0) {
	            ListNode curr = new ListNode(carry);
	            curr.next = head;
	            head = curr;
	        }

	        return head;
	    }
	
	
	
	
	/************* USING 2 STACK ****************/
		
		    Stack<Integer> l1_stack = new Stack<Integer>();
		    Stack<Integer> l2_stack = new Stack<Integer>();
		    Stack<Integer> result = new Stack<Integer>();
		    int carry = 0;
		    public ListNode addTwoNumbers_approach_01(ListNode l1, ListNode l2) {
		        recursive(l1, l1_stack);
		        recursive(l2, l2_stack);
		        ListNode dummy = new ListNode(0);
		        ListNode head = dummy;
		        while(!l1_stack.isEmpty() || !l2_stack.isEmpty() || carry > 0){
		            int v1 = !l1_stack.isEmpty() ? l1_stack.pop() : 0;
		            int v2 = !l2_stack.isEmpty() ? l2_stack.pop() : 0;
		            
		            int sum = v1 + v2 + carry;
		            result.push(sum%10);
		            carry = sum / 10;   
		        }
		        while(!result.isEmpty()){
		            head.next = new ListNode(result.pop());
		            head = head.next;
		        }
		        
		        return dummy.next;
		    }
		    
		    public void recursive(ListNode l1, Stack<Integer> stack){
		        
		        if(l1 != null){
		            stack.push(l1.value);
		            l1 = l1.next;
		        }else
		            return;
		       recursive(l1,stack);
		    }
	
}
